// Code generated by mockery v2.14.0. DO NOT EDIT.

package client

import (
	models "github.com/portto/aptos-go-sdk/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAptosClient is an autogenerated mock type for the AptosClient type
type MockAptosClient struct {
	mock.Mock
}

// CheckBasicNodeHealth provides a mock function with given fields: durationSecs, opts
func (_m *MockAptosClient) CheckBasicNodeHealth(durationSecs uint32, opts ...interface{}) (*HealthInfo, error) {
	var _ca []interface{}
	_ca = append(_ca, durationSecs)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *HealthInfo
	if rf, ok := ret.Get(0).(func(uint32, ...interface{}) *HealthInfo); ok {
		r0 = rf(durationSecs, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HealthInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, ...interface{}) error); ok {
		r1 = rf(durationSecs, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeSubmission provides a mock function with given fields: tx, opts
func (_m *MockAptosClient) EncodeSubmission(tx models.UserTransactionRequest, opts ...interface{}) (*SigningMessage, error) {
	var _ca []interface{}
	_ca = append(_ca, tx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *SigningMessage
	if rf, ok := ret.Get(0).(func(models.UserTransactionRequest, ...interface{}) *SigningMessage); ok {
		r0 = rf(tx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SigningMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.UserTransactionRequest, ...interface{}) error); ok {
		r1 = rf(tx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: address, opts
func (_m *MockAptosClient) GetAccount(address string, opts ...interface{}) (*AccountInfo, error) {
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *AccountInfo
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *AccountInfo); ok {
		r0 = rf(address, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AccountInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(address, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountModules provides a mock function with given fields: address, opts
func (_m *MockAptosClient) GetAccountModules(address string, opts ...interface{}) ([]AccountModule, error) {
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []AccountModule
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []AccountModule); ok {
		r0 = rf(address, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AccountModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(address, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountResources provides a mock function with given fields: address, opts
func (_m *MockAptosClient) GetAccountResources(address string, opts ...interface{}) ([]AccountResource, error) {
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []AccountResource
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []AccountResource); ok {
		r0 = rf(address, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AccountResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(address, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountTransactions provides a mock function with given fields: address, start, limit, opts
func (_m *MockAptosClient) GetAccountTransactions(address string, start int, limit int, opts ...interface{}) ([]TransactionResp, error) {
	var _ca []interface{}
	_ca = append(_ca, address, start, limit)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []TransactionResp
	if rf, ok := ret.Get(0).(func(string, int, int, ...interface{}) []TransactionResp); ok {
		r0 = rf(address, start, limit, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TransactionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, ...interface{}) error); ok {
		r1 = rf(address, start, limit, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksByHeight provides a mock function with given fields: height, withTransactions, opts
func (_m *MockAptosClient) GetBlocksByHeight(height uint64, withTransactions bool, opts ...interface{}) (*Block, error) {
	var _ca []interface{}
	_ca = append(_ca, height, withTransactions)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *Block
	if rf, ok := ret.Get(0).(func(uint64, bool, ...interface{}) *Block); ok {
		r0 = rf(height, withTransactions, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, bool, ...interface{}) error); ok {
		r1 = rf(height, withTransactions, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksByVersion provides a mock function with given fields: version, withTransactions, opts
func (_m *MockAptosClient) GetBlocksByVersion(version uint64, withTransactions bool, opts ...interface{}) (*Block, error) {
	var _ca []interface{}
	_ca = append(_ca, version, withTransactions)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *Block
	if rf, ok := ret.Get(0).(func(uint64, bool, ...interface{}) *Block); ok {
		r0 = rf(version, withTransactions, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, bool, ...interface{}) error); ok {
		r1 = rf(version, withTransactions, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByEventHandle provides a mock function with given fields: address, handleStruct, fieldName, start, limit, opts
func (_m *MockAptosClient) GetEventsByEventHandle(address string, handleStruct string, fieldName string, start int, limit int, opts ...interface{}) ([]models.Event, error) {
	var _ca []interface{}
	_ca = append(_ca, address, handleStruct, fieldName, start, limit)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(string, string, string, int, int, ...interface{}) []models.Event); ok {
		r0 = rf(address, handleStruct, fieldName, start, limit, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, int, ...interface{}) error); ok {
		r1 = rf(address, handleStruct, fieldName, start, limit, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByEventKey provides a mock function with given fields: key, opts
func (_m *MockAptosClient) GetEventsByEventKey(key string, opts ...interface{}) ([]models.Event, error) {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []models.Event); ok {
		r0 = rf(key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleByModuleID provides a mock function with given fields: address, moduleID, opts
func (_m *MockAptosClient) GetModuleByModuleID(address string, moduleID string, opts ...interface{}) (*AccountModule, error) {
	var _ca []interface{}
	_ca = append(_ca, address, moduleID)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *AccountModule
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) *AccountModule); ok {
		r0 = rf(address, moduleID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AccountModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(address, moduleID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceByAccountAddressAndResourceType provides a mock function with given fields: address, resourceType, opts
func (_m *MockAptosClient) GetResourceByAccountAddressAndResourceType(address string, resourceType string, opts ...interface{}) (*AccountResource, error) {
	var _ca []interface{}
	_ca = append(_ca, address, resourceType)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *AccountResource
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) *AccountResource); ok {
		r0 = rf(address, resourceType, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AccountResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(address, resourceType, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableItemByHandleAndKey provides a mock function with given fields: handle, req, opts
func (_m *MockAptosClient) GetTableItemByHandleAndKey(handle string, req TableItemReq, opts ...interface{}) (*TableItemValue, error) {
	var _ca []interface{}
	_ca = append(_ca, handle, req)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *TableItemValue
	if rf, ok := ret.Get(0).(func(string, TableItemReq, ...interface{}) *TableItemValue); ok {
		r0 = rf(handle, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TableItemValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, TableItemReq, ...interface{}) error); ok {
		r1 = rf(handle, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByHash provides a mock function with given fields: txHash, opts
func (_m *MockAptosClient) GetTransactionByHash(txHash string, opts ...interface{}) (*TransactionResp, error) {
	var _ca []interface{}
	_ca = append(_ca, txHash)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *TransactionResp
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *TransactionResp); ok {
		r0 = rf(txHash, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransactionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(txHash, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByVersion provides a mock function with given fields: version, opts
func (_m *MockAptosClient) GetTransactionByVersion(version uint64, opts ...interface{}) (*TransactionResp, error) {
	var _ca []interface{}
	_ca = append(_ca, version)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *TransactionResp
	if rf, ok := ret.Get(0).(func(uint64, ...interface{}) *TransactionResp); ok {
		r0 = rf(version, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransactionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, ...interface{}) error); ok {
		r1 = rf(version, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: start, limit, opts
func (_m *MockAptosClient) GetTransactions(start int, limit int, opts ...interface{}) ([]TransactionResp, error) {
	var _ca []interface{}
	_ca = append(_ca, start, limit)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []TransactionResp
	if rf, ok := ret.Get(0).(func(int, int, ...interface{}) []TransactionResp); ok {
		r0 = rf(start, limit, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TransactionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, ...interface{}) error); ok {
		r1 = rf(start, limit, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LedgerInformation provides a mock function with given fields: opts
func (_m *MockAptosClient) LedgerInformation(opts ...interface{}) (*LedgerInfo, error) {
	var _ca []interface{}
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *LedgerInfo
	if rf, ok := ret.Get(0).(func(...interface{}) *LedgerInfo); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LedgerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulateTransaction provides a mock function with given fields: tx, opts
func (_m *MockAptosClient) SimulateTransaction(tx models.UserTransactionRequest, opts ...interface{}) ([]TransactionResp, error) {
	var _ca []interface{}
	_ca = append(_ca, tx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []TransactionResp
	if rf, ok := ret.Get(0).(func(models.UserTransactionRequest, ...interface{}) []TransactionResp); ok {
		r0 = rf(tx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TransactionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.UserTransactionRequest, ...interface{}) error); ok {
		r1 = rf(tx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitTransaction provides a mock function with given fields: tx, opts
func (_m *MockAptosClient) SubmitTransaction(tx models.UserTransactionRequest, opts ...interface{}) (*TransactionResp, error) {
	var _ca []interface{}
	_ca = append(_ca, tx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *TransactionResp
	if rf, ok := ret.Get(0).(func(models.UserTransactionRequest, ...interface{}) *TransactionResp); ok {
		r0 = rf(tx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransactionResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.UserTransactionRequest, ...interface{}) error); ok {
		r1 = rf(tx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForTransaction provides a mock function with given fields: txHash
func (_m *MockAptosClient) WaitForTransaction(txHash string) error {
	ret := _m.Called(txHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(txHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockAptosClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAptosClient creates a new instance of MockAptosClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAptosClient(t mockConstructorTestingTNewMockAptosClient) *MockAptosClient {
	mock := &MockAptosClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
